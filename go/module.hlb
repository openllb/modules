export buildAll
export buildAllWithOptions
export buildCommon
export buildCommonWithOptions
export buildUnix
export buildUnixWithOptions
export build
export buildWithOptions
export lint
export lintWithOptions
export test
export testWithOptions
export base
export mountCwd
export mountCache

fs buildDownloadWithOptions(fs src, string package, string platform, string arch, option::template tmplOpts, option::run runOpts) {
	buildWithOptions src package option::template {
		tmplOpts
		stringField "platform" platform
		stringField "arch" arch
	} runOpts
	download string {
		template "{{.cwd}}/{{.buildDir}}/{{.platform}}-{{.arch}}" with option {
			defaultTmplOpts
			tmplOpts
			stringField "cwd" localCwd
			stringField "platform" platform
			stringField "arch" arch
		}
	}
}

fs buildDownload(fs src, string package, string platform, string arch) {
	buildDownloadWithOptions src package platform arch option::template{} option::run{}
}

# Build a go binary for all known platforms in parallel and download
# the binary to a local ./build directory.
#
# @param src a filesystem containing go source files.
# @param package a relative path for the package to build.
# @param tmplOpts template options used for the go build command
# @param runOpts run options use for the go build command
# @return a solve requiest to build and download in parallel
group buildAllWithOptions(fs src, string package, option::template tmplOpts, option::run runOpts) {
	parallel group {
		buildCommonWithOptions src package tmplOpts runOpts
	} fs {
		buildDownloadWithOptions src package "linux" "386"  tmplOpts runOpts
	} fs {
		buildDownloadWithOptions src package "linux" "arm5"  tmplOpts runOpts
	} fs {
		buildDownloadWithOptions src package "linux" "arm6"  tmplOpts runOpts
	} fs {
		buildDownloadWithOptions src package "linux" "arm7" tmplOpts runOpts
	} fs {
		buildDownloadWithOptions src package "linux" "ppc64" tmplOpts runOpts
	} fs {
		buildDownloadWithOptions src package "linux" "mips" tmplOpts runOpts
	} fs {
		buildDownloadWithOptions src package "linux" "s390" tmplOpts runOpts
	} fs {
		buildDownloadWithOptions src package "windows" "386" tmplOpts runOpts
	} fs {
		buildDownloadWithOptions src package "darwin" "386" tmplOpts runOpts
	}
}

# Build a go binary for all known platforms in parallel and download
# the binary to a local ./build directory.
#
# @param src a filesystem containing go source files.
# @param package a relative path for the package to build.a
# @return a solve requiest to build and download in parallel
group buildAll(fs src, string package) {
	buildAllWithOptions src package option::template{} option::run{}
}

# Build a go binary for common platforms (windows, linux, darwin) in parallel
# and download the binary to a local ./build directory.
#
# @param src a filesystem containing go source files.
# @param package a relative path for the package to build.
# @param tmplOpts template options used for the go build command
# @param runOpts run options use for the go build command
# @return a solve requiest to build and download in parallel
group buildCommonWithOptions(fs src, string package, option::template tmplOpts, option::run runOpts) {
	parallel group {
		buildUnixWithOptions src package tmplOpts runOpts
	} fs {
		buildDownloadWithOptions src package "windows" "amd64" tmplOpts runOpts
	}
}

# Build a go binary for common platforms (windows, linux, darwin) in parallel
# and download the binary to a local ./build directory.
#
# @param src a filesystem containing go source files.
# @param package a relative path for the package to build.
# @return a solve requiest to build and download in parallel
group buildCommon(fs src, string package) {
	buildCommonWithOptions src package option::template{} option::run{}
}

# Build a go binary for unix platforms (linux, darwin) in parallel
# and download the binary to a local ./build directory.
#
# @param src a filesystem containing go source files.
# @param package a relative path for the package to build.
# @param tmplOpts template options used for the go build command
# @param runOpts run options use for the go build command
# @return a solve requiest to build and download in parallel
group buildUnixWithOptions(fs src, string package, option::template tmplOpts, option::run runOpts) {
	parallel fs {
		buildDownloadWithOptions src package "linux" "amd64" tmplOpts runOpts
 	} fs {
		buildDownloadWithOptions src package "darwin" "amd64" tmplOpts runOpts
	}
}

# Build a go binary for unix platforms (linux, darwin) in parallel
# and download the binary to a local ./build directory.
#
# @param src a filesystem containing go source files.
# @param package a relative path for the package to build.
# @return a solve requiest to build and download in parallel
group buildUnix(fs src, string package) {
	buildUnixWithOptions src package option::template{} option::run{}
}

string builderImage(variadic option::template tmplOpts) {
	template <<~END
	{{- if eq .platform "linux" -}}
		{{- if (or (eq .arch "amd64") (eq .arch "386")) -}}
			{{.base}}:{{.goVersion}}-main
		{{- else if (or (eq .arch "arm5") (eq .arch "arm6") (eq .arch "arm7") (eq .arch "arm64")) -}}
			{{.base}}:{{.goVersion}}-arm
		{{- else if (or (eq .arch "ppc64") (eq .arch "ppc64le")) -}}
			{{.base}}:{{.goVersion}}-ppc
		{{- else if (or (eq .arch "mips") (eq .arch "mipsle") (eq .arch "mipls64") (eq .arch "mips64le")) -}}
			{{.base}}:{{.goVersion}}-mips
		{{- else -}}
			{{.base}}:{{.goVersion}}-{{.arch}}
		{{- end -}}
	{{- else if eq .platform "windows" -}}
		{{.base}}:{{.goVersion}}-main
	{{- else if eq .platform "darwin" -}}
		{{.base}}:{{.goVersion}}-darwin
	{{- end -}}
	END with option {
		stringField "base" "docker.elastic.co/beats-dev/golang-crossbuild"
		defaultTmplOpts
		tmplOpts
	}
}

option::template defaultTmplOpts() {
	stringField "goVersion" "1.14.2"
	stringField "platform" localOs
	stringField "arch" localArch
	stringField "goBuildFlags" ""
	stringField "binaryName" ""
	stringField "buildDir" "build"
	stringField "golangciLintVersion" "latest"
}

string goBuildCommand(string package, variadic option::template tmplOpts) {
	template <<~EOM
		go build {{.goBuildFlags}} -o /out/{{.binaryName}} {{.package}}
	EOM with option {
		defaultTmplOpts
		tmplOpts
		stringField "package" package
	}
}

fs base(variadic option::template tmplOpts) {
	image string {
		builderImage tmplOpts
	} with resolve
	# need to install ssh for git/private go mod deps
	run "apt-get update && apt-get -y install ssh"
}

# Builds a go binary.
#
# @param input a filesystem containing go source files.
# @param package a relative path for the package to build.
# @return a filesystem containing only the built binary.
fs build(fs input, string package) {
	buildWithOptions input package option::template{} option::run{}
}

fs _runBuild(fs input, string package, option::template tmplOpts, option::run runOpts) {
	base tmplOpts
	run string {
		template "/crossbuild --build-cmd {{printf \"%q\" .goBuildCommand}} -p '{{.platform}}/{{.arch}}'" with option {
			defaultTmplOpts
			stringField "goBuildCommand" string {
				goBuildCommand package tmplOpts
			}
			tmplOpts
		}
	} with option {
		runOpts
		mountCwd input
		mountCache
		# Builds a go binary.
		#
		# @param input a filesystem containing go source files.
		# @param package a relative path for the package to build.
		# @param tmplOpts template options used for the go build command
		# @param runOpts run options use for the go build command
		# @return a filesystem containing only the built binary.
		mount scratch "/out" as buildWithOptions
	}
}

# Runs Go linter (golangci-lint run) against provided source input.
#
# @param input a filesystem containing go source files.
# @param tmplOpts template options used for the lint command
# @param runOpts run options used for the lint command
# @return a filesystem containing only the built binary.
fs lintWithOptions(fs input, option::template tmplOpts, option::run runOpts) {
	base tmplOpts
	run string {
		template "curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b /go/bin {{.golangciLintVersion}}" with option {
			defaultTmplOpts
			tmplOpts
		}
	}
	run "/go/bin/golangci-lint run" with option {
		runOpts
		mountCwd input
		mountCache
		env "GOLANGCI_LINT_CACHE" "/golangci-lint-cache"
		mount scratch "/golangci-lint-cache" with option {
			cache "golangci-lint" "shared"
		}
	}
}

# Runs Go linter (golangci-lint run) against provided source input.
#
# @param input a filesystem containing go source files.
# @return a filesystem containing only the built binary.
fs lint(fs input) {
	lintWithOptions input option::template{} option::run{}
}

# Runs Go test via gotestsum against provided source
#
# @param input a filesystem containing go source and test files.
# @param tmplOpts template options used for the test command
# @param runOpts run options used for the test command
# @return a filesystem after the tests run
fs testWithOptions(fs input, option::template tmplOpts, option::run runOpts) {
	base tmplOpts
	# install gotestsum
	run "GOBIN=/usr/bin go get -v gotest.tools/gotestsum" with option {
		mountCache
	}

	run "gotestsum" with option {
		runOpts
		mountCwd input
		mountCache
	}
}

# Runs Go test via gotestsum against provided source
#
# @param input a filesystem containing go source and test files.
# @return a filesystem after the tests run
fs test(fs input) {
	testWithOptions input option::template{} option::run{}
}

string gopath() {
	template <<EOM
	{{- if .gopath -}}
		{{- .gopath -}}
	{{- else -}}
		/go
	{{- end -}}
	EOM with option {
		stringField "gopath" string {
			localEnv "GOPATH"
		}
	}
}

string cgoEnabled() {
	template <<EOM
		{{- if (not (eq .cgoEnabled "")) -}}
			{{.cgoEnabled}}
		{{- else -}}
			1
		{{- end -}}
	EOM with option {
		stringField "cgoEnabled" string {
			localEnv "CGO_ENABLED"
		}
	}
}

# Mount the provided input to the same location as the
# client current working directory.
#
# @param input a filesystem to mount to client cwd
# @return run options to for for the mount
option::run mountCwd(fs input) {
	dir localCwd
	mount input localCwd with readonly
}

# Add mounts for common Go related caching.
#
# @return run options with cache mounts
option::run mountCache() {
	env "GOCACHE" "/gocache"
	mount scratch "/gocache" with option {
		cache "go-build" "shared"
	}
	mount scratch string {
		format "%s/pkg" gopath
	} with option {
		cache "go-pkg" "shared"
	}
	env "CGO_ENABLED" cgoEnabled
	env "GO111MODULE" string {
		localEnv "GO111MODULE"
	}
	env "GOPATH" gopath
}